// 2DでのSPH法による流体のシミュレーション
// 密度、圧力、圧力項 + 粘性項 + 外力項、差分法による速度と位置の更新
// 基本的にはこの方針で解く

#pragma kernel DensityCS
#pragma kernel PressureCS
#pragma kernel ForceCS
#pragma kernel IntegrateCS

#include "Assets/CGInc/Particles.cginc"
#include "Assets/CGInc/SPH.cginc"

cbuffer cb : register(b0)
{
	float _Timestep;				// 時間刻み幅
	uint _ParticleCount;			// パーティクル数
	float _Smoothlen;				// パーティクルの平滑化距離

	float _DensityKernelCoef;		// 密度カーネル関数の係数
	float _PressureKernelCoef;		// 圧力カーネル関数の係数
	float _ViscosityKernelCoef;		// 粘性カーネル関数の係数

	float _PressureStiffness;		// 圧力定数
	float _RestDensity;				// 安定密度(対象流体の密度

	float _Viscosity;				// 動粘性係数

	float2 _Gravity;				// 重力加速度
	float2 _Range;					// シミュレーション範囲
	float _WallStiffness;			// 壁の反発力
	
	bool _MouseDown;				// マウス押下判定
	float2 _MousePosition;			// マウス位置
	float _MouseRadius;				// マウス半径
};

StructuredBuffer<SPH_Particle2D> _ParticlesBufferRead;
RWStructuredBuffer<SPH_Particle2D> _ParticlesBufferWrite;

// 密度計算のカーネル関数(poly6 kernel)
inline float CalcDensity(float sq_r)
{
	const float sq_h = _Smoothlen * _Smoothlen;
	const float d = sq_h - sq_r;
	return _DensityKernelCoef * d * d * d;
}

// 密度から圧力の計算
// 圧力定数B(_PressureStiffness)は正確に計算すべき。(でもリアルタイム向きではない
inline float CalcPressure(float density)
{
	return _PressureStiffness * max(pow(density / _RestDensity, 7) - 1, 0);
}

// 圧力勾配の計算
inline float2 CalcGradPressure(float r, float2 diff, float p_press, float q_press, float q_dens)
{
	const float h = _Smoothlen;
	float avg_press = (p_press + q_press) * 0.5f;
	float coef = _PressureKernelCoef * avg_press / q_dens * (h - r) * (h - r) / r;
	return coef * diff;	// floatだけで計算して最後にfloat2を掛けるほうが早い？どうだろう。
}

// 粘性の計算
inline float2 CalcLapViscosity(float r, float2 p_vel, float2 q_vel, float q_dens)
{
	const float h = _Smoothlen;
	float2 diff_vel = q_vel - p_vel;
	float coef = _ViscosityKernelCoef / q_dens * (h - r);
	return coef * diff_vel;
}

// それぞれのパーティクル(離散化観測点)の密度を計算
[numthreads(SPH_SIMULATION_BLOCK_SIZE, 1, 1)]
void DensityCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;
	SPH_Particle2D p = _ParticlesBufferRead[pid];
	float2 p_pos = p.position;

	float sq_h = _Smoothlen * _Smoothlen;
	float density = 0;
	for(uint i = 0; i < _ParticleCount; ++i)
	{
		if(i == pid) continue;

		SPH_Particle2D q = _ParticlesBufferRead[i];
		float2 diff = p_pos - q.position;
		float sq_r = dot(diff, diff);

		if(sq_r <= sq_h)
		{
			// massはdensity kernel coefに含めている想定
			density += CalcDensity(sq_r);
		}
	}
	p.density = density;
	_ParticlesBufferWrite[pid] = p;
}

// 圧力項の計算のために事前に密度から圧力を計算しておく
[numthreads(SPH_SIMULATION_BLOCK_SIZE, 1, 1)]
void PressureCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;
	SPH_Particle2D p = _ParticlesBufferRead[pid];
	p.pressure = CalcPressure(p.density);
	_ParticlesBufferWrite[pid] = p;
}

// 圧力項、粘性項、外力項の計算
[numthreads(SPH_SIMULATION_BLOCK_SIZE, 1, 1)]
void ForceCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;
	SPH_Particle2D p = _ParticlesBufferRead[pid];

	float sq_h = _Smoothlen * _Smoothlen;

	float2 press = float2(0, 0);
	float2 visco = float2(0, 0);

	for(uint i = 0; i < _ParticleCount; ++i)
	{
		if(pid == i) continue;

		SPH_Particle2D q = _ParticlesBufferRead[i];

		float2 diff = p.position - q.position;
		float sq_r = dot(diff, diff);

		if(sq_r < sq_h)
		{
			float r = sqrt(sq_r);
			// 基本的にmassや係数の正負は定数係数として処理する
			press += CalcGradPressure(r, diff, p.pressure, q.pressure, q.density);
			visco += CalcLapViscosity(r, p.velocity, q.velocity, q.density);
		}
	}

	// 合成
	// 圧力項のマイナスは係数として処理
	// 外力はこのあとのIntegrateCSにて処理
	// du/dt = (1 / dens) * f
	// f = visco * lap_vel - grad_press + {(1 / dens) * f_ext}
	float2 force = -press + _Viscosity * visco;
	p.acceleration = force / p.density;
	_ParticlesBufferWrite[pid] = p;
}

[numthreads(SPH_SIMULATION_BLOCK_SIZE, 1, 1)]
void IntegrateCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;

	SPH_Particle2D p = _ParticlesBufferRead[pid];
	float2 position = p.position;
	float2 velocity = p.velocity;
	float2 acceleration = p.acceleration;

	// マウスインタラクション
	if(_MouseDown && distance(position, _MousePosition) < _MouseRadius)
	{
		float2 dir = position - _MousePosition;
		float pushBack = _MouseRadius - length(dir);
		acceleration += 100.0f * pushBack * normalize(dir);
	}

	// 壁境界
	acceleration += min(position.x, 0) * -_WallStiffness * float2(1, 0);
	acceleration += min(position.y, 0) * -_WallStiffness * float2(0, 1);
	acceleration += max(position.x - _Range.x, 0) * _WallStiffness * float2(-1, 0);
	acceleration += max(position.y - _Range.y, 0) * _WallStiffness * float2(0, -1);

	// 外力項
	acceleration += _Gravity;

	// 漸進オイラー法による粒子座標の更新
	velocity += _Timestep * acceleration;
	position += _Timestep * velocity;

	p.acceleration = acceleration;
	p.velocity = velocity;
	p.position = position;

	_ParticlesBufferWrite[pid]= p;
}