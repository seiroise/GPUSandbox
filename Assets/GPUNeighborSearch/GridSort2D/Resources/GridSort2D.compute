#pragma kernel BuildGridParticlesCS GRIDSORT_PARTICLE_2D
#pragma kernel BuildGridParticlesCS GRIDSORT_SPH_PARTICLE_2D
#pragma kernel ClearGridIndicesCS GRIDSORT_PARTICLE_2D
#pragma kernel ClearGridIndicesCS GRIDSORT_SPH_PARTICLE_2D
#pragma kernel BuildGridIndicesCS GRIDSORT_PARTICLE_2D
#pragma kernel BuildGridIndicesCS GRIDSORT_SPH_PARTICLE_2D
#pragma kernel RearrangeParticlesCS GRIDSORT_PARTICLE_2D
#pragma kernel RearrangeParticlesCS GRIDSORT_SPH_PARTICLE_2D
#pragma kernel CopyBuffer GRIDSORT_PARTICLE_2D
#pragma kernel CopyBuffer GRIDSORT_SPH_PARTICLE_2D

#include "./../../../Common/Particles.cginc"

// 対象となるパーティクルを格納するためのバッファ種類に応じていくつか必要になる。
// なので切り替えたい場合はdefineを使用すること
#include "./../../../Common/ParticlesBuffer.cginc"
#include "./../../Common/NeighborSearch2D.cginc"

// パーティクルと対応するグリッドハッシュのペアを格納するためのバッファ
StructuredBuffer<uint2> _GridParticlePairBufferRead;
RWStructuredBuffer<uint2> _GridParticlePairBufferWrite;

// グリッドハッシュに対応するパーティクルの開始番号と終了番号を格納するためのバッファ
StructuredBuffer<uint2> _GridIndicesBufferRead;
RWStructuredBuffer<uint2> _GridIndicesBufferWrite;

cbuffer cb : register(b0)
{
	int _ParticleCount;
	float _GridCellSize;
	uint2 _GridDim;
};

// 座標に対応するグリッドハッシュ(本当にそう呼ぶかは不明...)
uint GridHash(uint2 pos)
{
	return pos.y * _GridDim.x + pos.x;
}

// uint型のキー(x)と値(y)のペアを作成する
uint2 MakeKeyValuePair(uint2 pos, uint value)
{
	return uint2(GridHash(pos), value);
}

uint GetGridKey(uint2 pair)
{
	return pair.x;
}

uint GetGridValue(uint2 pair)
{
	return pair.y;
}

// パーティクルごとに座標によるグリッドハッシュと、番号のペアを作成し、そのバッファを作成する。
// _ParticleBufferRead				: パーティクルの座標から所属グリッドの計算
// _GridParticlePairBufferWrite		: 所属グリッドのグリッドハッシュとパーティクル番号についての情報を格納する
[numthreads(NS_SIMULATION_BLOCK_SIZE, 1, 1)]
void BuildGridParticlesCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;
	if(pid > (uint)(_ParticleCount - 1)) return;

	float2 pos = _ParticlesBufferRead[pid].position;
	float2 grid = CalcGridAddress(pos, _GridCellSize, _GridDim);
	_GridParticlePairBufferWrite[pid] = MakeKeyValuePair((uint2)grid, pid);
}

// グリッドごとのパーティクルの開始番号と終了番号を設定するためのバッファの初期化
// _GridIndicesBufferWrite	: グリッド内のパーティクルの開始番号と終了番号のセットするための初期化
[numthreads(NS_SIMULATION_BLOCK_SIZE, 1, 1)]
void ClearGridIndicesCS(uint3 dtid : SV_DispatchThreadID)
{
	_GridIndicesBufferWrite[dtid.x] = uint2(0, 0);
}

// グリッドごとにグリッド番号によってソートされているパーティクルの配列から
// グリッドごとにパーティクルの開始番号と終了番号を設定する。
// _GridParticlePairBufferRead 	: ソート済みのグリッド番号とパーティクル番号のペアのバッファ
// _GridIndicesBufferWrite		: グリッドごとに開始番号と終了番号を書き込むためのバッファ
[numthreads(NS_SIMULATION_BLOCK_SIZE, 1, 1)]
void BuildGridIndicesCS(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;

	uint pid_prev = (pid == 0) ? (uint)_ParticleCount : pid;
	pid_prev -= 1;

	uint pid_next = pid + 1;
	pid_next = (pid_next == (uint)_ParticleCount) ? 0 : pid_next;

	uint cell 		= GetGridKey(_GridParticlePairBufferRead[pid]);
	uint cell_prev 	= GetGridKey(_GridParticlePairBufferRead[pid_prev]);
	uint cell_next	= GetGridKey(_GridParticlePairBufferRead[pid_next]);

	if(cell != cell_prev) _GridIndicesBufferWrite[cell].x = pid;
	if(cell != cell_next) _GridIndicesBufferWrite[cell].y = pid + 1;
}

// グリッド番号でソート済みのパーティクル番号を使って、パーティクルの実際のデータを再整列させる。
// _GridParticlePairBufferRead	: グリッド番号によってソート済みのパーティクル番号
// _ParticlesBufferRead			: パーティクルを表すデータのバッファ(読み込み
// _ParticlesBufferWrite		: パーティクルを表すデータのバッファ(書き込み
[numthreads(NS_SIMULATION_BLOCK_SIZE, 1, 1)]
void RearrangeParticlesCS(uint3 dtid : SV_DispatchThreadID)
{
	uint id = dtid.x;
	uint pid = GetGridValue(_GridParticlePairBufferRead[id]);
	_ParticlesBufferWrite[id] = _ParticlesBufferRead[pid];
}

// バッファのコピー
// _ParticlesBufferRead		: 読み込みバッファ
// _ParticlesBufferWrite	: 書き込みバッファ
[numthreads(NS_SIMULATION_BLOCK_SIZE, 1, 1)]
void CopyBuffer(uint3 dtid : SV_DispatchThreadID)
{
	uint pid = dtid.x;
	_ParticlesBufferWrite[pid] = _ParticlesBufferRead[pid];
}