#pragma kernel CS_InitParticles
#pragma kernel CS_InitEdges
#pragma kernel CS_EmitParticles
#pragma kernel CS_UpdateParticles
#pragma kernel CS_StoreDividableParticles
#pragma kernel CS_DivideParticles
#pragma kernel CS_StoreDividableEdges
#pragma kernel CS_DivideUnconnectedParticles
#pragma kernel CS_DivideEdgesClosed

#include "Assets/CGInc/Particles.cginc"
#include "Assets/CGInc/Random.cginc"

#define BLOCK_SIZE 512
#define THREADS [numthreads(BLOCK_SIZE, 1, 1)]

StructuredBuffer<CGS_Particle2D> _ParticlesRead;
RWStructuredBuffer<CGS_Particle2D> _Particles;
AppendStructuredBuffer<int> _ParticlePoolAppend;
ConsumeStructuredBuffer<int> _ParticlePoolConsume;

RWStructuredBuffer<CGS_Edge2D> _Edges;
AppendStructuredBuffer<int> _EdgePoolAppend;
ConsumeStructuredBuffer<int> _EdgePoolConsume;

AppendStructuredBuffer<int> _DividablePoolAppend;
ConsumeStructuredBuffer<int> _DividablePoolConsume;

uint _ParticleCount;
float _DT;

void CreateParticle2D(out CGS_Particle2D p)
{
	p.position = float2(0, 0);
	p.velocity = float2(0, 0);
	p.radius = p.threshold = 1;
	p.links = 0;
	p.alive = true;
}

THREADS
void CS_InitParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	CGS_Particle2D p;
	CreateParticle2D(p);
	p.alive = false;
	_Particles[idx] = p;
	_ParticlePoolAppend.Append(idx);
}

THREADS
void CS_InitEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	_Edges[idx].alive = false;
	_EdgePoolAppend.Append(idx);
}

float2 _EmitPoint;
uint _EmitCount;

THREADS
void CS_EmitParticles(uint3 id : SV_DispatchThreadID)
{
	if(id.x >= _EmitCount) return;

	// これきちんとブロックされるのかな？
	uint idx = _ParticlePoolConsume.Consume();

	CGS_Particle2D p = _Particles[idx];
	float2 offset = random_point_on_unit_circle(_EmitPoint + idx);
	p.position = _EmitPoint + offset;
	p.radius = hash12_sin(p.position + idx);
	p.alive = true;
	_Particles[idx] = p;
}

float _Drag;		// パーティクルの疑似速度抵抗
float _Limit;		// パーティクルの限界速度
float _Repulsion;	// パーティクル同士の反発力の係数
float _Grow;		// パーティクルの成長係数

THREADS
void CS_UpdateParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	// パーティクルのデータを読み込み用ハッファから
	CGS_Particle2D p = _ParticlesRead[idx];

	// 活性化しているパーティクルのみを取り扱う。
	if(p.alive)
	{
		// パーティクルの成長
		p.radius = min(p.threshold, p.radius  + _DT * _Grow);

		// パーティクル同士の反発
		// ここの判定はBitonicSortに変更すれば、早くなる。どのくらい早くなるのかはわからないけど。
		for(uint i = 0; i < _ParticleCount; ++i)
		{
			CGS_Particle2D other = _ParticlesRead[i];
			if(i == idx || !other.alive) continue;

			float2 dir = p.position - other.position;
			float l = length(dir);
			float r = (p.radius + other.radius) * _Repulsion;
			if(l < r)
			{
				p.velocity += normalize(dir) * (r - l);
			}
		}

		// 計算した速度を減衰させる。実際には自分のvelocityと相手のvelocityを見て加える力の向きは変更する必要があるだろうね。
		float2 vel = p.velocity * _DT;
		float vl = length(vel);
		if(vl > 0)
		{
			p.position += normalize(vel) * min(vl, _Limit);
			p.velocity = normalize(p.velocity) * min(_Limit, length(p.velocity) * _Drag);
		}
		else
		{
			p.velocity = float2(0, 0);
		}

		// 更新したデータを書き込み用のバッファへ
		_Particles[idx] = p;
	}
}

bool IsDividableParticle(in CGS_Particle2D p)
{
	float rate = p.radius / p.threshold;
	return rate >= 0.95;
}

uint DivideParticle(uint idx, float2 offset)
{
	CGS_Particle2D parent = _ParticlesRead[idx];
	CGS_Particle2D child;
	CreateParticle2D(child);

	// 分裂することになるので半径を半分にする。
	// つまり、質量が保存されていない。
	float hr = max(parent.radius * .5, .1);
	parent.radius = child.radius = hr;

	// 座標を調整
	float2 center = parent.position;
	parent.position = center + offset;
	child.position = center - offset;

	// 成長の限度を設定
	float x = hash12_sin(parent.position);
	child.threshold = x * 2. + hr;

	// 子を更新
	uint cidx = _ParticlePoolConsume.Consume();
	_Particles[cidx] = child;

	// 親を更新
	_Particles[idx] = parent;

	return cidx;
}

uint DivideParticle(uint idx)
{
	CGS_Particle2D parent = _ParticlesRead[idx];
	float2 offset = random_point_on_unit_circle(parent.position + idx) * parent.radius * .25;
	return DivideParticle(idx, offset);
}

THREADS
void CS_StoreDividableParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	CGS_Particle2D p = _ParticlesRead[idx];
	if(p.alive && IsDividableParticle(p))
	{
		_DividablePoolAppend.Append(idx);
	}
}

uint _DivideCount;

THREADS
void CS_DivideParticles(uint3 id : SV_DispatchThreadID)
{
	// Consumeバッファの内容量はcompute側では考慮しないので、
	// CPU側で_DivideCountは調整してください。
	if(id.x >= _DivideCount) return;
	uint idx = _DividablePoolConsume.Consume();
	DivideParticle(idx);
}

int _MaxLinks;	// パーティクル間エッジの最大数

bool IsDividableEdge(in CGS_Edge2D e)
{
	CGS_Particle2D pa = _Particles[e.a];
	CGS_Particle2D pb = _Particles[e.b];
	return pa.links < _MaxLinks && pb.links < _MaxLinks && IsDividableParticle(pa) && IsDividableParticle(pb);
}

THREADS
void CS_StoreDividableEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	CGS_Edge2D e = _Edges[idx];
	if (e.alive && IsDividableEdge(e))
	{
		// 分割プールにインデックスを追加する
		_DividablePoolAppend.Append(idx);
	}
}

// edgeプールから取り出して2つのパーティクルをエッジでつなぐ
void Connect(uint a, uint b)
{
	uint eidx = _EdgePoolConsume.Consume();

	InterlockedAdd(_Particles[a].links, 1);
	InterlockedAdd(_Particles[b].links, 1);

	CGS_Edge2D e;
	e.a = a;
	e.b = b;
	e.force = float2(0, 0);
	e.alive = true;
	_Edges[eidx] = e;
}

THREADS
void CS_DivideUnconnectedParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if(idx >= _ParticleCount) return;

	// 活性化していて、他のパーティクルとはリンクを作っていないようなパーティクルを選ぶ。
	CGS_Particle2D p = _ParticlesRead[idx];
	if(!p.alive || p.links > 0)	return;

	// 分裂させる
	uint cidx = DivideParticle(idx);

	// 分裂させた親と子をつなぐ
	Connect(idx, cidx);
}

void DivideEdgeClosed(uint idx)
{
	CGS_Edge2D e = _Edges[idx];
	
	CGS_Particle2D pa = _Particles[e.a];
	CGS_Particle2D pb = _Particles[e.b];

	if(pa.links == 1 || pb.links == 1)
	{
		// 3つのパーティクルで三角形を作るように分割して、エッジでつなぐ。
		uint cidx = DivideParticle(e.a);
		Connect(e.a, cidx);
		Connect(cidx, e.b);
	}
	else
	{
		float2 dir = pb.position - pa.position;
		float2 offset = normalize(dir) * pa.radius * .25;
		uint cidx = DivideParticle(e.a, offset);
		Connect(e.a, cidx);

		// もとのEdgeを新しく生成したパーティクルを接続するようにつなぎ直す。
		InterlockedAdd(_Particles[e.a].links, -1);
		InterlockedAdd(_Particles[cidx].links, 1);

		e.a = cidx;
	}
	_Edges[idx] = e;
}

THREADS
void CS_DivideEdgesClosed(uint3 id : SV_DispatchThreadID)
{
	if(id.x >= _DivideCount) return;

	uint idx = _DividablePoolConsume.Consume();
	DivideEdgeClosed(idx);
}